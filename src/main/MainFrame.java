/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package main;

import au.com.bytecode.opencsv.CSVWriter;
import com.jaunt.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import static main.DBFunctions.getAllFeatures;
import static main.DBFunctions.getFileName;
import static main.DBFunctions.saveURL;
import main.pojo.Brand;
import main.pojo.Category;
import main.pojo.Option;
import main.pojo.Product;


/**
 *
 * @author Mikhail
 */
public class MainFrame extends javax.swing.JFrame {
    
        String[] productsHeading = new String[20];
        String[] categoriesHeading = new String[20];
        String[] imagesHeading = new String[20];
        String[] combinationsHeading = new String[20];
        
         Brand mainBrand; 
         Category mainCategory;

         ArrayList<String>  logArray = new ArrayList();
     
         File mainDir =  new File("d:\\TILE.MA\\ETL");
         File productsFile = new File(mainDir+"\\products.csv");   // CVS File
         File imagesFile = new File(mainDir+"\\images.csv");
         
       
            Thread myThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    processProducts();
                } catch (        IOException | NodeNotFound | InterruptedException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
            
        int errorCheck;
         
    public MainFrame() {
        initComponents();
        mainBrand = new Brand("Vigo"); 
        mainCategory = new Category("Main Category");
     
                 productsHeading[0] = "Product code";
                 productsHeading[1] = "Category";
                 productsHeading[2] = "Secondary categories";
                 productsHeading[3] = "Product name";
                 productsHeading[4] = "Price";
                 productsHeading[5] = "Short description";
                 productsHeading[6] = "Description";
                 productsHeading[7] = "Features";
                 productsHeading[8] = "Options";
                 productsHeading[9] = "Store";
                 productsHeading[10] = "Language";
                 productsHeading[11] = "Meta keywords";
                 productsHeading[12] = "Meta description";
                 productsHeading[13] = "Free shipping";
                 productsHeading[14] = "Feature comparison";
                 productsHeading[15] = "Analogue tags";
                 productsHeading[16] = "Taxes";
                 productsHeading[17] = "Quantity";
                 productsHeading[18] = "Detailed image";
                 
                 imagesHeading[0] = "Product code";
                 imagesHeading[1] = "Pair type";
                 imagesHeading[2] = "Detailed image";
                 
                 
                 
        freeShippingCheckBox.setSelected(true);
        featureComparisonCheckBox.setSelected(true);
        saveImagesCheckBox.setSelected(true);
        
        myThread.setDaemon(true); // important, otherwise JVM does not exit at end of main()
        
        
        //test
       // Category cat1 = new Category("bathroom sinks");
       // Category cat2 = new Category("bathroom faucets");
      //  mainBrand.add(cat1);
      //  mainBrand.add(cat1);
        //end test
        

        jScrollPane1.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        writeProductsProductsButton = new javax.swing.JButton();
        urlTextField = new javax.swing.JTextField();
        storeComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        brandTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        secondaryCategoryTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        saveToFileButton = new javax.swing.JButton();
        freeShippingCheckBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        featureComparisonCheckBox = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        processButton = new javax.swing.JButton();
        processCategoriesButton = new javax.swing.JButton();
        writeImagesButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        saveImagesCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        currentProductLabel = new javax.swing.JLabel();
        productCountLabel = new javax.swing.JLabel();
        stopButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        totalProductsLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        categoryTable = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        writeProductsProductsButton.setText("Products --> File");
        writeProductsProductsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeProductsProductsButtonActionPerformed(evt);
            }
        });

        urlTextField.setText("http://www.build.com/top-knobs-hardware/c111279?term=top+knobs");
        urlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlTextFieldActionPerformed(evt);
            }
        });

        storeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Zource.com", "Massachusetts Tile Store" }));

        jLabel1.setText("Store");

        jLabel2.setText("Brand Name");

        brandTextField.setText("Top Knobs");

        jLabel3.setText("Secondary Category");

        secondaryCategoryTextField.setText("Hardware");

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        saveToFileButton.setText("Save As");
        saveToFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileButtonActionPerformed(evt);
            }
        });

        freeShippingCheckBox.setText("Free shipping");
        freeShippingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeShippingCheckBoxActionPerformed(evt);
            }
        });

        featureComparisonCheckBox.setText("Feature Comparison");

        jButton1.setText("Image Dir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        processButton.setText("Get Products Data");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        processCategoriesButton.setText(" Categories --> File");

        writeImagesButton.setText("Images --> File");
        writeImagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeImagesButtonActionPerformed(evt);
            }
        });

        jButton3.setText("Combinations --> File");

        saveImagesCheckBox.setText("Save Images");
        saveImagesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImagesCheckBoxActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Current Product:");

        currentProductLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        currentProductLabel.setText("          ");

        productCountLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        productCountLabel.setText("0");
        productCountLabel.setOpaque(true);
        productCountLabel.setPreferredSize(new java.awt.Dimension(6, 24));
        productCountLabel.setVerifyInputWhenFocusTarget(false);

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Total Products:");

        totalProductsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        totalProductsLabel.setText("       ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(urlTextField)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(146, 146, 146)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(brandTextField)
                                .addComponent(secondaryCategoryTextField)
                                .addComponent(storeComboBox, 0, 117, Short.MAX_VALUE)))
                        .addGap(141, 141, 141))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(currentProductLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel4)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(productCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalProductsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(freeShippingCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(featureComparisonCheckBox)
                    .addComponent(saveImagesCheckBox)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(processButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveToFileButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(processCategoriesButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(writeProductsProductsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(writeImagesButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                    .addComponent(stopButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(freeShippingCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(storeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(featureComparisonCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(brandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(secondaryCategoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveImagesCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(totalProductsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currentProductLabel)
                            .addComponent(productCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(processButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(processCategoriesButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(writeProductsProductsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(writeImagesButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveToFileButton)
                                .addGap(43, 43, 43)
                                .addComponent(stopButton))
                            .addComponent(jScrollPane1))
                        .addGap(28, 28, 28))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jTabbedPane2.addTab("Products", jPanel1);

        categoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(categoryTable);

        jButton4.setText("Get Categories Data");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap(310, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Categories", jPanel3);

        jMenu1.setText("File");

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openMenuItem);

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
       // Object deserialization 
        JFileChooser fileopen = new JFileChooser();
        fileopen.setCurrentDirectory(mainDir);
                    int ret = fileopen.showSaveDialog(null);  
                    if (ret == JFileChooser.APPROVE_OPTION) 
                    {
                        File openFile = fileopen.getSelectedFile(); 
                        try { 

                        FileInputStream fis = new FileInputStream(openFile); 
                        ObjectInputStream ois = new ObjectInputStream(fis); 
                        mainBrand = (Brand)ois.readObject(); 
                        ois.close(); 
                        System.out.println("Main Brand opened from file "); 
                        } 
                        catch(IOException | ClassNotFoundException e) { 
                        System.out.println("Exception during deserialization: " + 
                        e); 
                        System.exit(0); 
                        } 
                    }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // Object serialization 
        JFileChooser fileopen = new JFileChooser();
        fileopen.setCurrentDirectory(mainDir);
                    int ret = fileopen.showSaveDialog(null);  
                    if (ret == JFileChooser.APPROVE_OPTION) 
                    {
                        File saveFile = fileopen.getSelectedFile(); 
                        try { 

                        FileOutputStream fos = new FileOutputStream(saveFile); 
                        ObjectOutputStream oos = new ObjectOutputStream(fos); 
                        oos.writeObject(mainBrand); 
                        oos.flush(); 
                        oos.close(); 
                        System.out.println("Main Brand saved to file");
                        } 
                        catch(IOException e) { 
                        System.out.println("Exception during serialization: " + e); 
                        //System.exit(0); 
                        }
                    }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveImagesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImagesCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveImagesCheckBoxActionPerformed

    private void writeImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeImagesButtonActionPerformed
        try {
            writeLineToFile(imagesHeading, imagesFile, false);
            for (Category category: mainBrand.getCategories())
            for (Product product: category.getProducts())
            for (String st: product.getImageList())
            {
                String img[] = new String[20];
                img[0] = product.getProduct_code();
                img[1] = "A";
                img[2] = st;

                writeLineToFile(img, imagesFile, true);
                System.out.println( img[0] + " has been written to file successfully!");
            }  } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_writeImagesButtonActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        UserAgent userAgent = new UserAgent();
        try {    
        userAgent.visit(urlTextField.getText());
            Elements elements = userAgent.doc.findEach("<div class='innerbox cat'>");
            System.out.println(elements.innerHTML());
            if (elements.innerHTML().trim().equals("")) {
                mainBrand.add(mainCategory);
                mainCategory.setUrl(urlTextField.getText().trim());
                searchProductsOnPage(mainCategory, urlTextField.getText());
            }
            else                
                searchCategoriesList(urlTextField.getText());
            
      
        
            totalProductsLabel.update(totalProductsLabel.getGraphics());
            totalProductsLabel.setText(Integer.toString(mainBrand.getItemsCount()));
    
            myThread.start();
            
            System.out.println("Product Process Complete!");
            }   catch (  IOException | ResponseException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_processButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose Images Dir");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            mainDir = chooser.getSelectedFile();
            System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void freeShippingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeShippingCheckBoxActionPerformed

    }//GEN-LAST:event_freeShippingCheckBoxActionPerformed

    private void saveToFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(mainDir);
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {
                productsFile = fileChooser.getSelectedFile();
                writeLineToFile(productsHeading, productsFile, false);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveToFileButtonActionPerformed

    private void urlTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_urlTextFieldActionPerformed

    private void writeProductsProductsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeProductsProductsButtonActionPerformed
        try {
            writeLineToFile(productsHeading, productsFile, false);
            for (Category category: mainBrand.getCategories())
            for (Product product: category.getProducts())
            {
                String prod[] = new String[20];
                prod[0] = product.getProduct_code();
                prod[1] = product.getCategory();
                prod[2] = product.getSecondary_categories();
                prod[3] = product.getProduct_name();
                prod[4] = product.getPrice();
                prod[5] = product.getShort_description();
                prod[6] = product.getDescription();
                prod[7] = product.getFeatures();
                prod[8] = product.getOptions();
                prod[9] = product.getStore();
                prod[10] = product.getLanguage();
                prod[11] = product.getMeta_keywords();
                prod[12] = product.getMeta_description();
                prod[13] = product.getFree_shipping();
                prod[14] = product.getFeature_comparison();
                prod[15] = product.getAnalogue_tags();
                prod[16] = product.getTaxes();
                prod[17] = product.getQuantity();
                prod[18] = product.getDetailed_image();

                writeLineToFile(prod, productsFile, true);
                System.out.println( prod[0] + " has been written to file successfully!");
            }  } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_writeProductsProductsButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_stopButtonActionPerformed
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField brandTextField;
    private javax.swing.JTable categoryTable;
    private javax.swing.JLabel currentProductLabel;
    private javax.swing.JCheckBox featureComparisonCheckBox;
    private javax.swing.JCheckBox freeShippingCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton processButton;
    private javax.swing.JButton processCategoriesButton;
    private javax.swing.JLabel productCountLabel;
    private javax.swing.JCheckBox saveImagesCheckBox;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton saveToFileButton;
    private javax.swing.JTextField secondaryCategoryTextField;
    private javax.swing.JButton stopButton;
    private javax.swing.JComboBox storeComboBox;
    private javax.swing.JLabel totalProductsLabel;
    private javax.swing.JTextField urlTextField;
    private javax.swing.JButton writeImagesButton;
    private javax.swing.JButton writeProductsProductsButton;
    // End of variables declaration//GEN-END:variables




public void searchProductsOnPage(Category category, String page){
    
    UserAgent userAgent = new UserAgent();                  
    try {    
        userAgent.visit(page);
            
    Elements elements = userAgent.doc.findEvery("<a class='url product-link'");           
    for(Element el: elements){
        Product product = new Product();       
        product.setUrl(el.getAttx("href"));
        System.out.println("Href: " + product.getUrl()); 
        category.add(product);
        category.setItemsCount(category.getItemsCount()+1);
        mainBrand.setItemsCount(mainBrand.getItemsCount()+1);
    }
    System.out.println("End page.");

    if (!searchNextProductsLink(page).equals(""))
        searchProductsOnPage(category, searchNextProductsLink(page));

      } catch (    ResponseException | IOException ex) {
              Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
          }   
}

public String searchNextProductsLink(String url) throws IOException {
      String next ="";
      UserAgent userAgent = new UserAgent();
       try {
        userAgent.visit(url);

        if (userAgent.doc.innerHTML().contains("Go to Next Page"))
        {
            next = userAgent.doc.findFirst("<a title='Go to Next Page'>").getAttx("href");
            System.out.println("Next page found: "+ next);
        }
        else
        {
            System.out.println("No more pages with product links.");
            next = "";   
        }
             
        } catch (    ResponseException | NodeNotFound ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } 
    
    return next;
   
}

    private void processProducts() throws IOException, NodeNotFound, InterruptedException
    {  
     Map <String,String> featureMap = getAllFeatures();
     int productCount = 0;
     
     UserAgent userAgent = new UserAgent();
       for (Category category: mainBrand.getCategories()) 
         for(Product product: category.getProducts())
         {    
         try {
             productCount++;
             productCountLabel.setText(Integer.toString(productCount));
             currentProductLabel.setText(product.getProduct_code());
             productCountLabel.update(productCountLabel.getGraphics());
             currentProductLabel.update(currentProductLabel.getGraphics());
             
             userAgent.visit(product.getUrl());
             
             //Options
             Elements links =  userAgent.doc.findEach("<a class='swatchlink'");
             System.out.println("Options found: "+product.getUrl());
             if (links!=null) {
                 processOptions(product);
             }
             
             
             //Image Gallery
             Elements imageLinks =  userAgent.doc.findEach("<div class='mediabox clearfix'");
             if (imageLinks!=null && saveImagesCheckBox.isSelected()) {
                 errorCheck = 0;
                 processImages(product);
             }
             
             Element name = userAgent.doc.findFirst("<span id='titleName'");
             Element code = userAgent.doc.findFirst("<span id='titleProdId'");
             Element price = userAgent.doc.findFirst("<div id='productPrice");
             Element description = userAgent.doc.findFirst("<div class='description-override'");
             //Table traversal
             Element features_table = userAgent.doc.findFirst("<table class='specs'>");
             Elements features = features_table.findEach("<tr>");
             String feature_st = "";
             for (Element feature: features)
             {
                 if (!feature.findEvery("<span rel='popup'>").innerHTML().trim().isEmpty())
                 {
                     String f_name = feature.findFirst("<span rel='popup'>").innerHTML().trim();
                     String f_val = feature.getElement(1).innerHTML().trim();
                     
                     //feature type
                     if (featureMap.containsKey(f_name))
                         feature_st +=f_name+":"+featureMap.get(f_name)+"["+f_val+"];";
                     else {
                         logTextArea.update(logTextArea.getGraphics());
                         updateLog(logTextArea, "No type for feature: " +f_name+ "\n");
                     }
                     //analogue tags
                     if (f_name.equalsIgnoreCase("collection"))
                         product.setAnalogue_tags(f_val);
                     
                     //System.out.println("Feature name: "+f_name);
                     // System.out.println("Feature value: "+f_val);
                     // System.out.println("Next feature.............. ");
                 }
             }
             
             String finish;
             Elements el = userAgent.doc.findEach("<div class='finishselected'");
             if (product.getOptionListStrings() == null)
                 finish = el.getElement(0).innerHTML().trim();
             else
                 finish = StringUtils.join(product.getOptionListStrings(), ",");
             
             product.setFeatures("Manufacturer:E["+brandTextField.getText().trim()+"];"+"Finish:M["+finish+"];"+feature_st);
             product.setProduct_code(code.innerHTML().trim());
             product.setCategory("Brands///"+brandTextField.getText().trim()+"///"+category.getName());
             product.setSecondary_categories(secondaryCategoryTextField.getText().trim()+"///"+category.getName());
             product.setProduct_name(name.innerHTML().trim());
             if (price.innerHTML().trim().toString().contains(" "))
                 product.setPrice(price.innerHTML().trim().substring(1,price.innerHTML().trim().indexOf(" ")));
             else
                 product.setPrice(price.innerHTML().trim().substring(1));
             product.setShort_description("");
             product.setDescription(description.innerHTML().trim());
             
             product.setStore(storeComboBox.getSelectedItem().toString());
             product.setLanguage("en");
             product.setMeta_keywords(""); //meta key
             product.setMeta_description(""); //meta desc
             if (freeShippingCheckBox.isSelected()) product.setFree_shipping("Yes"); else product.setFree_shipping("No");
             if (featureComparisonCheckBox.isSelected()) product.setFeature_comparison("Yes"); else product.setFeature_comparison("No");
             product.setTaxes("Sales Taxes");
             product.setQuantity("1000");
             //Main Image
             String image_url = userAgent.doc.findFirst("<a id='productImageLink'").getAttx("href");
             product.setImage_url(image_url);
             String image_name = getFileName(image_url);
             if (saveImagesCheckBox.isSelected())
                saveURL(mainDir+"\\"+image_name, image_url);
             product.setDetailed_image(image_name);
             System.out.println("Image: "+ image_name);
             System.out.println("Product code: "+code.innerHTML().trim());
         } catch (ResponseException ex) {
             HttpResponse response = ex.getResponse();
             Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
                    }              
    }

    public void searchCategoriesList(String st) throws IOException {
      System.out.println("Category search started.....");
      UserAgent userAgent = new UserAgent();                  
      try {    
      userAgent.visit(st);         
      Elements elements = userAgent.doc.findEvery("<div class='innerbox cat'>");
           
      for(Element el: elements){   
        String a = el.findFirst("<a").getAttx("href");
        String name = el.findFirst("<div").findFirst("<a").innerHTML().trim();
        String image = el.findFirst("<a").findFirst("<img").getAttx("src"); 
        Category category = new Category(name);    
        category.setUrl(a);
        category.setImage(image);
        mainBrand.add(category);
        searchProductsOnPage(category, a);
        System.out.println("Category URL : "+a);
        System.out.println("Category name: "+name);
    }
      System.out.println("Categories Search Complete!");

    } catch (     ResponseException | NodeNotFound ex) {
              Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
          }
           
}

    private void updateLog(JTextArea logTextArea, String line) {
        if (!logArray.contains(line))
        {
            logArray.add(line);
            logTextArea.append(line);
        }      
    }
    private void writeLineToFile(String[] st,File f, boolean append) throws IOException {
        String filePath = f.getAbsolutePath();
                 CSVWriter writer;                
                 writer = new CSVWriter(new FileWriter(filePath,append));
                 writer.writeNext(st);
                 System.out.println("\nComplete.  File written out to " + filePath);
                 writer.close();
    }

    private void processOptions(Product product) throws IOException, InterruptedException {
            try {
                UserAgent userAgent = new UserAgent();
                
                userAgent.visit(product.getUrl());
                
                System.out.println("--------------BEGIN PROCESS OPTIONS----------------");
                Elements elements = userAgent.doc.findEach("<a class='swatchlink'");
               
                for (Element el: elements)
                {
                    UserAgent ua = new UserAgent();
                    //System.out.println("Element: "+el.outerHTML());
                    
                    Option option = new Option();
                    product.add(option);
                    option.setName("Finish");
                    option.setCss(el.findEach("<div class='subwatch'").getAttx("style"));
                    
                    //emulate click on option thumb
                    String old_url = el.getAttx("href");
                    String option_url = "http://www.build.com/" + old_url.substring(old_url.indexOf(" ")+1);
                    ua.visit(option_url);
                    
                    option.setValue(ua.doc.findFirst("<span id='finishName'").innerHTML().trim());
                    
                    option.setPrice(ua.doc.findFirst("<div id='productPrice'").innerHTML().trim().substring(1));
                    String q = ua.doc.findFirst("<div id='stockCount'").innerHTML().trim();
                    option.setQuantity(q.substring(0, q.indexOf(" ")));
                    //option.setCss(ua.doc.findFirst("<div class='subswatch'").getAttx("style"));
                    option.setCode(ua.doc.findFirst("<span itemprop='model'").innerHTML().trim());
                    
                    //Option Image
                    String image_url = ua.doc.findFirst("<a id='productImageLink'").getAttx("href");
                    String image_name = getFileName(image_url);
                    if (saveImagesCheckBox.isSelected())
                        saveURL(mainDir+"\\"+image_name, image_url);
                    option.setImage(image_name);
                    
                    System.out.println("Option Value: "+option.getValue());
                    System.out.println("Option Price: "+option.getPrice());
                    System.out.println("Option Quantity: "+option.getQuantity());
                    System.out.println("Option Image: "+option.getImage());
                    
                }   
                 //set options string
            if (product.getOptionsList().size() > 0)
                product.setOptions("Finish:S["+StringUtils.join(product.getOptionListStrings(), ",")+"];");  
            
            
            } catch (    ResponseException | NodeNotFound ex) {                                  
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
 
    }

    private void processImages(Product product) throws IOException {
            
        try {
                
                UserAgent userAgent = new UserAgent();
                
                userAgent.visit(product.getUrl());
                
                System.out.println("--------------BEGIN PROCESS IMAGE GALLERY----------------");
                Elements elements = userAgent.doc.findEach("<a rel='fb_gallery'");
                for (Element el: elements)
                {
                    String image_url = el.getAttx("href");
                    String image_name = getFileName(image_url);          
                    saveURL(mainDir+"\\"+image_name, image_url);
                    product.addImage(image_name);
                    
                    System.out.println("Image URL: "+image_url);
                }   } catch (ResponseException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                
            }
        
        
    }

    
}
